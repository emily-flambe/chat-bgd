/**
 * Generated static assets for Cloudflare Worker
 * DO NOT EDIT - This file is auto-generated by build-static.js
 */

export const staticAssets: Record<string, string> = {
  '/index.html': `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChatBGD - AI Chat Interface</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <div class="header">
        <h1>ChatBGD</h1>
        <div class="status-section">
            <div class="status-indicator connected" id="statusIndicator" title="Ready to chat"></div>
            <span class="status-text">Ready</span>
        </div>
    </div>

    <div class="chat-container">
        <div class="messages" id="messages">
            <div class="empty-state">
                <h2>Welcome to ChatBGD</h2>
                <p>Start chatting with AI below</p>
            </div>
        </div>
        
        <div class="loading" id="loading">
            <div class="spinner"></div>
            <span>AI is thinking...</span>
        </div>
    </div>

    <div class="input-section">
        <div class="input-area">
            <textarea 
                class="message-input" 
                id="messageInput" 
                placeholder="Type your message... (Enter to send, Shift+Enter for new line)"
                rows="1"
            ></textarea>
            <div class="char-count" id="charCount">0 / 4000</div>
        </div>
        <button class="send-button" id="sendButton" type="button">Send</button>
    </div>

    <!-- Reasoning Modal -->
    <div class="reasoning-modal" id="reasoningModal">
        <div class="reasoning-modal-content">
            <div class="reasoning-modal-header">
                <h3>AI Reasoning</h3>
                <button class="reasoning-modal-close" id="reasoningModalClose">&times;</button>
            </div>
            <div class="reasoning-modal-body" id="reasoningModalBody">
                <!-- Reasoning content will be inserted here -->
            </div>
        </div>
    </div>

    <script src="/script.js"></script>
</body>
</html>`,
  '/script.js': `class ChatBGD {
    constructor() {
        this.apiEndpoint = '/api/chat';
        this.messages = [];
        
        this.initializeElements();
        this.bindEvents();
        this.autoResizeTextarea();
    }

    initializeElements() {
        this.statusIndicator = document.getElementById('statusIndicator');
        this.messagesContainer = document.getElementById('messages');
        this.messageInput = document.getElementById('messageInput');
        this.sendButton = document.getElementById('sendButton');
        this.charCount = document.getElementById('charCount');
        this.loading = document.getElementById('loading');
        this.reasoningModal = document.getElementById('reasoningModal');
        this.reasoningModalClose = document.getElementById('reasoningModalClose');
        this.reasoningModalBody = document.getElementById('reasoningModalBody');
    }

    bindEvents() {
        this.messageInput.addEventListener('input', () => this.handleMessageInput());
        this.messageInput.addEventListener('keydown', (e) => this.handleKeyDown(e));
        this.sendButton.addEventListener('click', () => this.sendMessage());
        
        // Modal events
        this.reasoningModalClose.addEventListener('click', () => this.closeReasoningModal());
        this.reasoningModal.addEventListener('click', (e) => {
            if (e.target === this.reasoningModal) {
                this.closeReasoningModal();
            }
        });
        
        // Escape key to close modal
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.reasoningModal.classList.contains('show')) {
                this.closeReasoningModal();
            }
        });
    }

    handleMessageInput() {
        const message = this.messageInput.value;
        const charCount = message.length;
        
        this.charCount.textContent = \`\${charCount} / 4000\`;
        this.charCount.style.color = charCount > 4000 ? '#dc2626' : '#6b7280';
        
        this.autoResizeTextarea();
    }

    autoResizeTextarea() {
        const textarea = this.messageInput;
        textarea.style.height = 'auto';
        textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
    }

    handleKeyDown(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            this.sendMessage();
        }
    }

    async sendMessage() {
        const message = this.messageInput.value.trim();
        
        if (!message) return;
        if (message.length > 4000) {
            this.showError('Message too long. Maximum 4000 characters.');
            return;
        }

        // Clear input and show user message
        this.messageInput.value = '';
        this.handleMessageInput();
        this.addMessage('user', message);
        this.setLoading(true);

        try {
            const response = await this.callAPI(message);
            if (response.error) {
                this.showError(response.error);
            } else {
                this.addMessage('assistant', response.response, response.reasoning);
            }
        } catch (error) {
            console.error('Chat error:', error);
            this.showError(this.getErrorMessage(error));
        } finally {
            this.setLoading(false);
        }
    }

    async callAPI(message) {
        console.log('🔍 Frontend: Starting API call');
        console.log('🔍 Frontend: API Endpoint:', this.apiEndpoint);
        console.log('🔍 Frontend: Message:', message);
        console.log('🔍 Frontend: Current URL:', window.location.href);
        
        const requestBody = { message };
        console.log('🔍 Frontend: Request body:', JSON.stringify(requestBody));
        
        try {
            console.log('🔍 Frontend: Making fetch request...');
            const response = await fetch(this.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            console.log('🔍 Frontend: Fetch response received');
            console.log('🔍 Frontend: Response status:', response.status);
            console.log('🔍 Frontend: Response ok:', response.ok);
            console.log('🔍 Frontend: Response headers:', Object.fromEntries(response.headers.entries()));

            if (!response.ok) {
                console.log('🚨 Frontend: Response not OK');
                const responseText = await response.text();
                console.log('🚨 Frontend: Error response body:', responseText);
                
                if (response.status === 429) {
                    throw new Error('Rate limit exceeded');
                } else if (response.status >= 500) {
                    throw new Error('Service temporarily unavailable');
                } else {
                    throw new Error(\`HTTP \${response.status}: \${response.statusText}\`);
                }
            }

            console.log('🔍 Frontend: Parsing JSON response...');
            const jsonResponse = await response.json();
            console.log('🔍 Frontend: Parsed response:', jsonResponse);
            
            return jsonResponse;
            
        } catch (fetchError) {
            console.error('🚨 Frontend: Fetch error caught:', fetchError);
            console.error('🚨 Frontend: Error type:', typeof fetchError);
            console.error('🚨 Frontend: Error message:', fetchError.message);
            console.error('🚨 Frontend: Error stack:', fetchError.stack);
            throw fetchError;
        }
    }

    addMessage(type, content, reasoning = null) {
        // Remove empty state if it exists
        const emptyState = this.messagesContainer.querySelector('.empty-state');
        if (emptyState) {
            emptyState.remove();
        }

        if (type === 'assistant') {
            // Create message container with optional reasoning button
            const containerDiv = document.createElement('div');
            containerDiv.className = \`message-container \${type}\`;
            
            const messageDiv = document.createElement('div');
            messageDiv.className = \`message \${type}\`;
            messageDiv.innerHTML = this.renderMarkdown(content); // Use innerHTML for markdown
            
            containerDiv.appendChild(messageDiv);
            
            if (reasoning) {
                const reasoningButton = document.createElement('button');
                reasoningButton.className = 'reasoning-button';
                reasoningButton.textContent = '?';
                reasoningButton.title = 'Show AI reasoning';
                reasoningButton.addEventListener('click', () => {
                    this.showReasoningModal(reasoning);
                });
                containerDiv.appendChild(reasoningButton);
            }
            
            this.messagesContainer.appendChild(containerDiv);
        } else {
            // User messages and errors - use regular message div with proper alignment
            const messageDiv = document.createElement('div');
            messageDiv.className = \`message \${type}\`;
            messageDiv.textContent = content;
            this.messagesContainer.appendChild(messageDiv);
        }
        
        this.scrollToBottom();
    }

    showError(message) {
        this.addMessage('error', message);
    }

    setLoading(loading) {
        this.loading.classList.toggle('show', loading);
        this.sendButton.disabled = loading;
        this.sendButton.textContent = loading ? '...' : 'Send';
        
        if (loading) {
            this.scrollToBottom();
        }
    }

    scrollToBottom() {
        setTimeout(() => {
            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
        }, 10);
    }

    getErrorMessage(error) {
        if (error.message.includes('fetch') || error.message.includes('Failed to fetch')) {
            return 'Connection failed. Check your internet connection.';
        } else if (error.message.includes('Rate limit')) {
            return 'Too many requests. Please wait a moment.';
        } else if (error.message.includes('Service temporarily unavailable')) {
            return 'AI service temporarily unavailable. Please try again later.';
        } else {
            return error.message || 'An unexpected error occurred.';
        }
    }

    showReasoningModal(reasoning) {
        this.reasoningModalBody.textContent = reasoning || 'No reasoning available';
        this.reasoningModal.classList.add('show');
        // Prevent body scroll when modal is open
        document.body.style.overflow = 'hidden';
    }

    closeReasoningModal() {
        this.reasoningModal.classList.remove('show');
        // Restore body scroll
        document.body.style.overflow = '';
    }

    renderMarkdown(text) {
        // Basic markdown renderer - handles common elements
        let html = text;
        
        // Escape HTML first, but preserve line breaks
        html = html.replace(/</g, '&lt;').replace(/>/g, '&gt;');
        
        // Bold **text** and __text__
        html = html.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');
        html = html.replace(/__(.*?)__/g, '<strong>$1</strong>');
        
        // Italic *text* and _text_
        html = html.replace(/(?<!\\*)\\*([^*\\n]+?)\\*(?!\\*)/g, '<em>$1</em>');
        html = html.replace(/(?<!_)_([^_\\n]+?)_(?!_)/g, '<em>$1</em>');
        
        // Code \`text\`
        html = html.replace(/\`([^\`]+?)\`/g, '<code>$1</code>');
        
        // Headers (# ## ###)
        html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');
        html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');
        html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');
        
        // Links [text](url)
        html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');
        
        // Line breaks (double newlines become paragraphs)
        html = html.replace(/\\n\\n/g, '</p><p>');
        html = '<p>' + html + '</p>';
        
        // Single line breaks
        html = html.replace(/\\n/g, '<br>');
        
        // Clean up empty paragraphs
        html = html.replace(/<p><\\/p>/g, '');
        
        // Lists - Basic unordered lists
        html = html.replace(/^\\* (.+$)/gim, '<li>$1</li>');
        html = html.replace(/^- (.+$)/gim, '<li>$1</li>');
        html = html.replace(/(<li>.*<\\/li>)/s, '<ul>$1</ul>');
        
        // Numbered lists
        html = html.replace(/^\\d+\\. (.+$)/gim, '<li>$1</li>');
        
        // Code blocks \`\`\`
        html = html.replace(/\`\`\`([^\`]*?)\`\`\`/gs, '<pre><code>$1</code></pre>');
        
        return html;
    }
}

// Initialize the chat when the page loads
document.addEventListener('DOMContentLoaded', () => {
    new ChatBGD();
});`,
  '/styles.css': `* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    height: 100vh;
    background: #f8fafc;
    color: #1e293b;
    display: flex;
    flex-direction: column;
}

.header {
    background: white;
    border-bottom: 1px solid #e2e8f0;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
}

.header h1 {
    font-size: 1.25rem;
    font-weight: 600;
    color: #0f172a;
}

.status-section {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.status-text {
    font-size: 0.875rem;
    color: #10b981;
    font-weight: 500;
}

.status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #ef4444;
}

.status-indicator.connected {
    background: #10b981;
}

.chat-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    min-height: 0;
}

.messages {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.message {
    max-width: 80%;
    padding: 0.75rem 1rem;
    border-radius: 1rem;
    white-space: pre-wrap;
    word-wrap: break-word;
    position: relative;
}

.message-container {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    max-width: 80%;
}

.message-container.user {
    align-self: flex-end;
    flex-direction: row-reverse;
}

.message-container.assistant {
    align-self: flex-start;
}

.message.user {
    align-self: flex-end;
    background: #3b82f6;
    color: white;
    border-bottom-right-radius: 0.25rem;
}

.message.assistant {
    background: white;
    border: 1px solid #e2e8f0;
    border-bottom-left-radius: 0.25rem;
}

/* Markdown styles for assistant messages */
.message.assistant h1,
.message.assistant h2,
.message.assistant h3 {
    margin: 0.5rem 0;
    font-weight: 600;
}

.message.assistant h1 {
    font-size: 1.25rem;
    color: #1e293b;
}

.message.assistant h2 {
    font-size: 1.125rem;
    color: #334155;
}

.message.assistant h3 {
    font-size: 1rem;
    color: #475569;
}

.message.assistant p {
    margin: 0.5rem 0;
}

.message.assistant p:first-child {
    margin-top: 0;
}

.message.assistant p:last-child {
    margin-bottom: 0;
}

.message.assistant strong {
    font-weight: 600;
    color: #1e293b;
}

.message.assistant em {
    font-style: italic;
    color: #374151;
}

.message.assistant code {
    background: #f1f5f9;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    font-size: 0.825rem;
    color: #e11d48;
}

.message.assistant pre {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 0.375rem;
    padding: 0.75rem;
    margin: 0.5rem 0;
    overflow-x: auto;
}

.message.assistant pre code {
    background: none;
    padding: 0;
    color: #374151;
    font-size: 0.8rem;
}

.message.assistant ul,
.message.assistant ol {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
}

.message.assistant li {
    margin: 0.25rem 0;
}

.message.assistant a {
    color: #3b82f6;
    text-decoration: underline;
}

.message.assistant a:hover {
    color: #2563eb;
}

.message.error {
    align-self: center;
    background: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
}

.input-section {
    background: white;
    border-top: 1px solid #e2e8f0;
    padding: 1rem;
    display: flex;
    gap: 0.75rem;
    align-items: flex-end;
}

.input-area {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

.message-input {
    min-height: 2.5rem;
    max-height: 120px;
    padding: 0.625rem;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    resize: none;
    font-family: inherit;
    font-size: 0.875rem;
    line-height: 1.25rem;
}

.message-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 1px #3b82f6;
}

.char-count {
    font-size: 0.75rem;
    color: #6b7280;
    text-align: right;
}

.send-button {
    background: #3b82f6;
    color: white;
    border: none;
    border-radius: 0.5rem;
    padding: 0.625rem 1rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    height: fit-content;
    min-width: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.send-button:hover:not(:disabled) {
    background: #2563eb;
}

.send-button:disabled {
    background: #9ca3af;
    cursor: not-allowed;
}

.loading {
    display: none;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background: #f1f5f9;
    border-radius: 1rem;
    align-self: flex-start;
    color: #64748b;
    font-style: italic;
}

.loading.show {
    display: flex;
}

.spinner {
    width: 16px;
    height: 16px;
    border: 2px solid #e2e8f0;
    border-top: 2px solid #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #64748b;
    text-align: center;
    padding: 2rem;
}

.empty-state h2 {
    font-size: 1.125rem;
    margin-bottom: 0.5rem;
    color: #374151;
}

/* Reasoning Button */
.reasoning-button {
    background: #f1f5f9;
    border: 1px solid #e2e8f0;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 0.75rem;
    color: #64748b;
    transition: all 0.2s ease;
    flex-shrink: 0;
}

.reasoning-button:hover {
    background: #e2e8f0;
    color: #475569;
}

.reasoning-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Reasoning Modal */
.reasoning-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    backdrop-filter: blur(2px);
}

.reasoning-modal.show {
    display: flex;
    align-items: center;
    justify-content: center;
}

.reasoning-modal-content {
    background: white;
    border-radius: 0.75rem;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    max-width: 600px;
    max-height: 80vh;
    width: 90%;
    margin: 2rem;
    display: flex;
    flex-direction: column;
}

.reasoning-modal-header {
    padding: 1.5rem;
    border-bottom: 1px solid #e2e8f0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.reasoning-modal-header h3 {
    margin: 0;
    font-size: 1.125rem;
    font-weight: 600;
    color: #1e293b;
}

.reasoning-modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    color: #64748b;
    cursor: pointer;
    padding: 0;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 0.25rem;
}

.reasoning-modal-close:hover {
    background: #f1f5f9;
    color: #374151;
}

.reasoning-modal-body {
    padding: 1.5rem;
    overflow-y: auto;
    font-size: 0.875rem;
    line-height: 1.6;
    color: #374151;
    white-space: pre-wrap;
}

@media (max-width: 640px) {
    .header {
        flex-direction: column;
        align-items: stretch;
    }

    .status-section {
        justify-content: center;
    }

    .message {
        max-width: 95%;
    }

    .message-container {
        max-width: 95%;
    }

    .reasoning-modal-content {
        margin: 1rem;
        width: calc(100% - 2rem);
        max-height: 90vh;
    }

    .reasoning-modal-header,
    .reasoning-modal-body {
        padding: 1rem;
    }
}`
};

export const assetPaths = Object.keys(staticAssets);
